openapi: "3.0.2"
info:
  title: Paperless-ngx API Documentation
  version: "v2.5.0"
servers:
  - url: http://demo.paperless.home.local/api
    description: "Local development server"

security:
  - BasicAuth: []
  - BearerAuth: []

paths:
  /documents/:
    get:
      summary: "Retrieves a paged list of all documents"
      operationId: "getAllDocuments"
      parameters:
        - in: query
          description: "Comma separated list of correspondents to include"
          explode: false
          style: form
          name: correspondent__id__in
          schema:
            type: array
            items:
              type: integer
        - in: query
          description: "Include documents with any correspondent (0) or none (1) assigned."
          explode: false
          style: form
          name: correspondent__isnull
          schema:
            type: integer
        - in: query
          description: "Comma separated list of tags to include"
          explode: false
          style: form
          name: tag__id__all
          schema:
            type: array
            items:
              type: integer
        - in: query
          description: "Comma separated list of tags to exclude"
          explode: false
          style: form
          name: tag__id__none
          schema:
            type: array
            items:
              type: integer
        - in: query
          description: "Include documents with any tag (1) or no tags (0) assigned."
          name: is_tagged
          schema:
            type: integer
            minimum: 0
            maximum: 1
        - in: query
          description: "Comma separated list of document types to include"
          explode: false
          style: form
          name: document_type__id__in
          schema:
            type: array
            items:
              type: integer
        - in: query
          description: "Include documents with any document type (0) or none (1) assigned."
          explode: false
          style: form
          name: document_type__isnull
          schema:
            type: integer
        - in: query
          description: "Whether to truncate the content field."
          name: truncate_content
          schema:
            type: boolean
        - in: query
          description: "Comma separated list of storage paths to include"
          explode: false
          style: form
          name: storage_path__id__in
          schema:
            type: array
            items:
              type: integer
        - in: query
          description: "Include documents with any storage path (0) or none (1) assigned."
          explode: false
          style: form
          name: storage_path__isnull
          schema:
            type: integer
        - in: query
          description: "The field to sort the results by"
          name: ordering
          schema:
            $ref: "#/components/schemas/DocumentOrdering"
        - in: query
          description: "Include documents created after the given date"
          name: created__date__gt
          schema:
            type: string
            format: date
        - in: query
          description: "Include documents created before the given date"
          name: created__date__lt
          schema:
            type: string
            format: date
        - in: query
          description: "Include documents added after the given date"
          name: added__date__gt
          schema:
            type: string
            format: date
        - in: query
          description: "Include documents added before the given date"
          name: added__date__lt
          schema:
            type: string
            format: date
        - in: query
          description: "Include documents owned by the given user"
          name: owner__id
          schema:
            type: integer
        - in: query
          description: "Include documents not owned by the given user (i.e. shared with this user)"
          name: owner__id__none
          schema:
            type: integer
        - in: query
          description: "Include documents shared by the given user"
          name: shared_by__id
          schema:
            type: integer
        - in: query
          description: "Include documents with (0) or without (1) an owner."
          name: owner__isnull
          schema:
            type: integer
        - in: query
          description: "Include the document with the given ASN"
          name: archive_serial_number
          schema:
            type: integer
        - in: query
          description: "Include documents with the given expression included in a custom field"
          name: custom_fields__icontains
          schema:
            type: string
        - in: query
          description: "Document title contains the given expression"
          name: title__icontains
          schema:
            type: string
        - in: query
          description: "Include documents matching the given expression. Supports extended syntax"
          name: query
          schema:
            type: string
        - in: query
          description: "Either document title or content contains the given string"
          name: title_content
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: page_size
          schema:
            type: integer
            maximum: 100000
            default: 25
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasePagingResponse"
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Document"
        403:
          description: "Forbidden"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  detail: { type: string }

  /documents/{id}/:
    get:
      summary: "Retrieves a single document by id"
      operationId: "getDocumentById"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Correspondent"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  detail: { type: string }

  /ui_settings/:
    get:
      summary: "Retrieves the UI settings for the current user"
      operationId: "getUISettings"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UISettings"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /correspondents/:
    get:
      summary: "Retrieves a paged list of all correspondents"
      operationId: "getAllCorrespondents"
      parameters:
        - in: query
          name: id__in
          description: "Id in given values"
          schema:
            type: array
            items: { type: integer }
          explode: false
          style: form
        - in: query
          name: id
          description: "Id matches value"
          schema: { type: integer }
        - in: query
          name: name__istartswith
          description: "Name starts with pattern"
          schema: { type: string }
        - in: query
          name: name__iendswith
          description: "Name ends with pattern"
          schema: { type: string }
        - in: query
          name: name__icontains
          description: "Name contains pattern"
          schema: { type: string }
        - in: query
          name: name__iexact
          description: "Name exactly matches pattern"
          schema: { type: string }
        - in: query
          name: ordering
          schema: { $ref: "#/components/schemas/LabelOrdering" }
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: page_size
          schema:
            type: integer
            maximum: 100000
            default: 25
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasePagingResponse"
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Correspondent"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
    post:
      summary: "Creates a new correspondent"
      operationId: "createCorrespondent"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreateCorrespondent" }
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Correspondent" }
        400:
          description: "Bad Request"
          content:
            application/json:
              schema: {}
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /correspondents/{id}/:
    get:
      summary: "Retrieves a single correspondent by id"
      operationId: "getCorrespondentById"
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Correspondent"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  detail: { type: string }
    put:
      summary: "Updates this correspondent."
      operationId: "updateCorrespondent"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Correspondent" }
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Correspondent" }
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
    delete:
      summary: "Deletes this correspondent."
      operationId: "deleteCorrespondent"
      responses:
        204:
          description: "Deleted"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /storage_paths/:
    get:
      summary: "Retrieves a paged list of all storage paths"
      operationId: "getAllStoragePaths"
      parameters:
        - in: query
          name: id__in
          description: "Id in given values"
          schema:
            type: array
            items: { type: integer }
          explode: false
          style: form
        - in: query
          name: id
          description: "Id matches value"
          schema: { type: integer }
        - in: query
          name: name__istartswith
          description: "Name starts with pattern"
          schema: { type: string }
        - in: query
          name: name__iendswith
          description: "Name ends with pattern"
          schema: { type: string }
        - in: query
          name: name__icontains
          description: "Name contains pattern"
          schema: { type: string }
        - in: query
          name: name__iexact
          description: "Name exactly matches pattern"
          schema: { type: string }
        - in: query
          name: path__istartswith
          description: "Path starts with pattern"
          schema: { type: string }
        - in: query
          name: path__iendswith
          description: "Path ends with pattern"
          schema: { type: string }
        - in: query
          name: path__icontains
          description: "Path contains pattern"
          schema: { type: string }
        - in: query
          name: path__iexact
          description: "Path exactly matches pattern"
          schema: { type: string }
        - in: query
          name: ordering
          schema: { $ref: "#/components/schemas/LabelOrdering" }
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: page_size
          schema:
            type: integer
            maximum: 100000
            default: 25
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasePagingResponse"
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/StoragePath"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
    post:
      summary: "Creates a new storage path"
      operationId: "createStoragePath"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreateStoragePath" }
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema: { $ref: "#/components/schemas/StoragePath" }
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /storage_paths/{id}/:
    get:
      summary: "Retrieves a single storage path by id"
      operationId: "getStoragePathById"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoragePath"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  detail: { type: string }
    put:
      summary: "Updates this storage path."
      operationId: "updateStoragePath"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/StoragePath" }
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema: { $ref: "#/components/schemas/StoragePath" }
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

    delete:
      summary: "Deletes this storage path."
      operationId: "deleteStoragePath"
      responses:
        204:
          description: "Deleted"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /document_types/:
    get:
      summary: "Retrieves a paged list of all document types"
      operationId: "getAllDocumentTypes"
      parameters:
        - in: query
          name: id__in
          description: "Id in given values"
          schema:
            type: array
            items: { type: integer }
          explode: false
          style: form
        - in: query
          name: id
          description: "Id matches value"
          schema: { type: integer }
        - in: query
          name: name__istartswith
          description: "Name starts with pattern"
          schema: { type: string }
        - in: query
          name: name__iendswith
          description: "Name ends with pattern"
          schema: { type: string }
        - in: query
          name: name__icontains
          description: "Name contains pattern"
          schema: { type: string }
        - in: query
          name: name__iexact
          description: "Name exactly matches pattern"
          schema: { type: string }
        - in: query
          name: ordering
          schema: { $ref: "#/components/schemas/LabelOrdering" }
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: page_size
          schema:
            type: integer
            maximum: 100000
            default: 25
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasePagingResponse"
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/DocumentType"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
    post:
      summary: "Creates a new document type"
      operationId: "createDocumentType"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreateDocumentType" }
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema: { $ref: "#/components/schemas/DocumentType" }
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /document_types/{id}/:
    get:
      summary: "Retrieves a single document type by id"
      operationId: "getDocumentTypeById"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentType"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  detail: { type: string }
    put:
      summary: "Updates this document type."
      operationId: "updateDocumentType"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/DocumentType" }
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema: { $ref: "#/components/schemas/DocumentType" }
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

    delete:
      summary: "Deletes this document type."
      operationId: "deleteDocumentType"
      responses:
        204:
          description: "Deleted"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /tags/:
    get:
      summary: "Retrieves a paged list of all tags"
      operationId: "getAllTags"
      parameters:
        - in: query
          name: id__in
          description: "Id in given values"
          schema:
            type: array
            items: { type: integer }
          explode: false
          style: form
        - in: query
          name: id
          description: "Id matches value"
          schema: { type: integer }
        - in: query
          name: name__istartswith
          description: "Name starts with pattern"
          schema: { type: string }
        - in: query
          name: name__iendswith
          description: "Name ends with pattern"
          schema: { type: string }
        - in: query
          name: name__icontains
          description: "Name contains pattern"
          schema: { type: string }
        - in: query
          name: name__iexact
          description: "Name exactly matches pattern"
          schema: { type: string }
        - in: query
          name: ordering
          schema: { $ref: "#/components/schemas/TagOrdering" }
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: page_size
          schema:
            type: integer
            maximum: 100000
            default: 25
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasePagingResponse"
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Tag"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
    post:
      summary: "Creates a new tag"
      operationId: "createTag"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreateTag" }
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Tag" }
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /tags/{id}/:
    get:
      summary: "Retrieves a single tag by id"
      operationId: "getTagById"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  detail: { type: string }
    put:
      summary: "Updates this tag."
      operationId: "updateTag"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Tag" }
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Tag" }
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

    delete:
      summary: "Deletes this tag."
      operationId: "deleteTag"
      responses:
        204:
          description: "Deleted"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /custom_fields/:
    get:
      summary: "Retrieves a paged list of all custom fields"
      operationId: "getAllCustomFields"
      parameters:
        - in: query
          name: id__in
          description: "Id in given values"
          schema:
            type: array
            items: { type: integer }
          explode: false
          style: form
        - in: query
          name: id
          description: "Id matches value"
          schema: { type: integer }
        - in: query
          name: name__istartswith
          description: "Name starts with pattern"
          schema: { type: string }
        - in: query
          name: name__iendswith
          description: "Name ends with pattern"
          schema: { type: string }
        - in: query
          name: name__icontains
          description: "Name contains pattern"
          schema: { type: string }
        - in: query
          name: name__iexact
          description: "Name exactly matches pattern"
          schema: { type: string }
        - in: query
          name: ordering
          schema: { $ref: "#/components/schemas/LabelOrdering" }
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: page_size
          schema:
            type: integer
            maximum: 100000
            default: 25
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasePagingResponse"
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/CustomField"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  detail: { type: string }
    post:
      summary: "Creates a new custom field"
      operationId: "createCustomField"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreateCustomField" }
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CustomField" }
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /custom_fields/{id}/:
    get:
      summary: "Retrieves a single custom field by id"
      operationId: "getCustomFieldById"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomField"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  detail: { type: string }
    put:
      summary: "Updates this custom field."
      operationId: "updateCustomField"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CustomField" }
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CustomField" }
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

    delete:
      summary: "Deletes this custom field."
      operationId: "deleteCustomField"
      responses:
        204:
          description: "Deleted"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /logs/:
    get:
      summary: "Lists the available types of logs"
      operationId: "getAllLogTypes"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items: { type: string }
                example: ["paperless"]
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /logs/{type}/:
    get:
      summary: "Lists the log entries of the specified type"
      operationId: "getLogsByType"
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
          example: paperless
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items: { type: string }
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  detail: { type: string }

  /saved_views/:
    get:
      summary: Retrieves a paged list of all saved views.
      operationId: "getAllSavedViews"
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: page_size
          schema:
            type: integer
            maximum: 100000
            default: 25
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasePagingResponse"
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/SavedView"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /saved_views/{id}/:
    get:
      summary: "Retrieves a single saved view by id"
      operationId: "getSavedViewById"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SavedView"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  detail: { type: string }
    put:
      summary: "Updates this saved view."
      operationId: "updateSavedView"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/SavedView" }
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema: { $ref: "#/components/schemas/SavedView" }
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

    delete:
      summary: "Deletes this saved view."
      operationId: "deleteSavedView"
      responses:
        204:
          description: "Deleted"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /tasks/:
    get:
      summary: Retrieves a paged list of all tasks.
      operationId: "getAllTasks"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /tasks/{id}/:
    get:
      summary: "Retrieves a single task by id"
      operationId: "getTaskById"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  detail: { type: string }

  /users/:
    get:
      summary: "Retrieves a paged list of all users"
      operationId: "getAllUsers"
      parameters:
        - in: query
          name: username__istartswith
          description: "Username starts with pattern"
          schema: { type: string }
        - in: query
          name: username__iendswith
          description: "Username ends with pattern"
          schema: { type: string }
        - in: query
          name: username__icontains
          description: "Username contains pattern"
          schema: { type: string }
        - in: query
          name: username__iexact
          description: "Username exactly matches pattern"
          schema: { type: string }
        - in: query
          name: ordering
          schema: { $ref: "#/components/schemas/UserOrdering" }
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: page_size
          schema:
            type: integer
            maximum: 100000
            default: 25
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasePagingResponse"
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /users/{id}/:
    get:
      summary: "Retrieves a single user by id"
      operationId: "getUserById"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  detail: { type: string }
    put:
      summary: "Updates this user."
      operationId: "updateUser"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/User" }
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
    delete:
      summary: "Deletes this user."
      operationId: "deleteUser"
      responses:
        204:
          description: "Deleted"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /groups/:
    get:
      summary: "Retrieves a paged list of all groups"
      operationId: "getAllGroups"
      parameters:
        - in: query
          description: "Group name starts with pattern"
          name: name__istartswith
          schema: { type: string }
        - in: query
          description: "Group name ends with pattern"
          name: name__iendswith
          schema: { type: string }
        - in: query
          description: "Group name contains pattern"
          name: name__icontains
          schema: { type: string }
        - in: query
          description: "Group name exactly matches pattern"
          name: name__iexact
          schema: { type: string }
        - in: query
          name: ordering
          schema: { $ref: "#/components/schemas/GroupOrdering" }
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: page_size
          schema:
            type: integer
            maximum: 100000
            default: 25
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasePagingResponse"
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Group"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
    post:
      summary: "Creates a new group"
      operationId: "createGroup"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreateGroup" }
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Group" }
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /groups/{id}/:
    get:
      summary: "Retrieves a single group by id"
      operationId: "getGroupById"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  detail: { type: string }
    put:
      summary: "Updates this group."
      operationId: "updateGroup"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Group" }
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Group" }
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
    delete:
      summary: "Deletes this group."
      operationId: "deleteGroup"
      responses:
        204:
          description: "Deleted"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /profile/:
    get:
      summary: "Retrieves the profile of the current user"
      operationId: "getProfile"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /mail_accounts/:
    get:
      summary: "Retrieves a paged list of all mail accounts"
      operationId: "getAllMailAccounts"
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: page_size
          schema:
            type: integer
            maximum: 100000
            default: 25
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasePagingResponse"
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/MailAccount"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /mail_accounts/{id}/:
    get:
      summary: "Retrieves a single mail account by id"
      operationId: "getMailAccountById"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MailAccount"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  detail: { type: string }
    put:
      summary: "Updates this mail account."
      operationId: "udpateMailAccount"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/MailAccount" }
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema: { $ref: "#/components/schemas/MailAccount" }
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
    delete:
      summary: "Deletes this correspondent."
      operationId: "deleteMailAccount"
      responses:
        204:
          description: "Deleted"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /mail_rules/:
    get:
      summary: "Retrieves a paged list of all mail rules"
      operationId: "getAllMailRules"
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: page_size
          schema:
            type: integer
            maximum: 100000
            default: 25
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasePagingResponse"
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/MailRule"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /mail_rules/{id}/:
    get:
      summary: "Retrieves a single mail rule by id"
      operationId: "getMailRuleById"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MailRule"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  detail: { type: string }
    put:
      summary: "Updates this mail rule."
      operationId: "updateMailRule"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/MailRule" }
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema: { $ref: "#/components/schemas/MailRule" }
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
    delete:
      summary: "Deletes this mail rule."
      operationId: "deleteMailRule"
      responses:
        204:
          description: "Deleted"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /share_links/:
    get:
      summary: "Retrieves a paged list of all share links"
      operationId: "getAllShareLinks"
      parameters:
        - in: query
          name: created__year
          description: "Created year"
          schema: {type: number} 
        - in: query
          name: created__month
          description: "Created month"
          schema: {type: number} 
        - in: query
          name: created__day
          description: "Created day"
          schema: {type: number} 
        - in: query
          name: created__date__gt
          description: "Created after date"
          schema: {type: string, format: date-time} 
        - in: query
          name: created__gt
          description: "Created after date"
          schema: {type: string, format: date-time} 
        - in: query
          name: created__date__lt
          description: "Created  before date"
          schema: {type: string, format: date-time} 
        - in: query
          name: created__lt
          description: "Created before date"
          schema: {type: string, format: date-time}
        - in: query
          name: expiration__year
          description: "Expires in year"
          schema: {type: number} 
        - in: query
          name: expiration__month
          description: "Expires at month"
          schema: {type: number} 
        - in: query
          name: expiration__day
          description: "Expires at day"
          schema: {type: number} 
        - in: query
          name: expiration__date__gt
          description: "Expires after date"
          schema: {type: string, format: date-time} 
        - in: query
          name: expiration__gt
          description: "Expires after date"
          schema: {type: string, format: date-time} 
        - in: query
          name: expiration__date__lt
          description: "Expires before date"
          schema: {type: string, format: date-time} 
        - in: query
          name: expiration__lt
          description: "Expires before date"
          schema: {type: string, format: date-time}
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: page_size
          schema:
            type: integer
            maximum: 100000
            default: 25
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasePagingResponse"
                properties:
                  results:
                    type: array
                    items: { $ref: "#/components/schemas/ShareLink" }

        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /share_links/{id}/:
    get:
      summary: "Retrieves a single share link by id"
      operationId: "getShareLinkById"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ShareLink" }
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  detail: { type: string }
    put:
      summary: "Updates this share link."
      operationId: "updateShareLink"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ShareLink" }
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ShareLink" }
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
    delete:
      summary: "Deletes this share link."
      operationId: "deleteShareLink"
      responses:
        204:
          description: "Deleted"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
      description: "Token {bearerToken}"
  schemas:
    BasePagingResponse:
      type: object
      required:
        - count
        - all
      properties:
        count:
          type: integer
        all:
          type: array
          items:
            type: integer
        next:
          type: string
        previous:
          type: string
    UISettings:
      type: object
      properties:
        user:
          type: object
          properties:
            id: { type: integer, readOnly: true }
            username: { type: string }
            is_superuser: { type: boolean }
        groups:
          type: array
          items: { type: integer }
        settings:
          type: object
          properties:
            update_checking:
              type: object
              properties:
                enabled: { type: string }
                backend_setting: { type: string }
            app_title: { type: string }
            app_logo: { type: string }
        permissions:
          type: array
          items: { $ref: "#/components/schemas/UserPermission" }

    User:
      type: object
      properties:
        id: { type: integer, readOnly: true }
        username: { type: string }
        email: { type: string }
        password: { type: string }
        first_name: { type: string }
        last_name: { type: string }
        date_joined: { type: string }
        is_staff: { type: boolean }
        is_active: { type: boolean }
        is_superuser: { type: boolean }
        groups:
          type: array
          items: { type: integer }
        user_permissions:
          type: array
          items: { $ref: "#/components/schemas/UserPermission" }
        inherited_permissions:
          type: array
          items: { $ref: "#/components/schemas/InheritedPermission" }

    Group:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        permissions:
          type: array
          items: { $ref: "#/components/schemas/UserPermission" }
    CreateGroup:
      type: object
      properties:
        name: { type: string }
        permissions:
          type: array
          items: { $ref: "#/components/schemas/UserPermission" }

    Document:
      type: object
      properties:
        id: { type: integer, readOnly: true }
        correspondent: { type: integer }
        document_type: { type: integer }
        storage_path: { type: integer }
        tags:
          type: array
          items: { type: integer }
        title: { type: string }
        content: { type: string }
        mime_type:
          type: string
          readOnly: true
          maxLength: 256
        checksum:
          type: string
          readOnly: true
          maxLength: 32
        archive_checksum:
          type: string
          readOnly: true
          maxLength: 32
        created:
          type: string
          format: date-time
        created_date:
          type: string
          format: date
        added:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true
        filename:
          description: "The current filename in storage"
          type: string
          readOnly: true
          maxLength: 1024
        archive_filename:
          description: "The original name of the file when it was uploaded"
          type: string
          readOnly: true
          maxLength: 1024
        archive_serial_number:
          description: "The position of this document in your physical document archive"
          type: integer
          minimum: 0
          maximum: 0xFFFFFFFF
        original_file_name: { type: string }
        archived_file_name: { type: string }
        owner: { type: integer }
        user_can_change: { type: boolean }
        is_shared_by_requester: { type: boolean }
        set_permissions:
          $ref: "#/components/schemas/SetPermissions"
        notes:
          type: array
          items:
            $ref: "#/components/schemas/Note"
        custom_fields:
          type: array
          items:
            type: object
            properties:
              field: { type: integer }
              value: {}
      required:
        - id
        - title
        - content
        - added
        - checksum
        - original_file_name
        - archived_file_name

    Label:
      type: object
      properties:
        id: { type: integer, readOnly: true }
        name: { type: string }
        slug: { type: string }
        match: { type: string }
        matching_algorithm:
          type: integer
          minimum: 0
          maximum: 6
        is_insensitive: { type: boolean }
        document_count: { type: integer }
        last_correspondence:
          type: string
          format: date-time
        owner: { type: integer }
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/UserPermission"
        user_can_change: { type: boolean }
        set_permissions:
          $ref: "#/components/schemas/SetPermissions"
      required:
        - id
        - name
        - slug

    CreateLabel:
      type: object
      properties:
        name: { type: string }
        match: { type: string }
        matching_algorithm:
          type: integer
          minimum: 0
          maximum: 6
        is_insensitive: { type: boolean }
        owner: { type: integer }
        set_permissions:
          $ref: "#/components/schemas/SetPermissions"
      required:
        - name
        - matching_algorithm

    UpdateLabel:
      type: object
      properties:
        id: { type: integer, readOnly: true }
        name: { type: string, maxLength: 128 }
        slug: { type: string, readOnly: true }
        match: { type: string, maxLength: 256 }
        matching_algorithm:
          type: integer
          minimum: 0
          maximum: 6
        is_insensitive: { type: boolean }
        document_count: { type: integer, readOnly: true }
        last_correspondence:
          type: string
          format: date-time
          readOnly: true
        owner: { type: integer }
        user_can_change: { type: boolean, readOnly: true }
        set_permissions:
          $ref: "#/components/schemas/SetPermissions"
      required:
        - name

    Correspondent:
      allOf:
        - $ref: "#/components/schemas/Label"
    CreateCorrespondent:
      allOf:
        - $ref: "#/components/schemas/CreateLabel"
    UpdateCorrespondent:
      allOf:
        - $ref: "#/components/schemas/UpdateLabel"

    StoragePath:
      allOf:
        - $ref: "#/components/schemas/Label"
        - type: object
          properties:
            path: { type: string, maxLength: 512 }
      required:
        - path
    CreateStoragePath:
      allOf:
        - $ref: "#/components/schemas/CreateLabel"
        - type: object
          properties:
            path: { type: string, maxLength: 512 }
          required:
            - path
    UpdateStoragePath:
      allOf:
        - $ref: "#/components/schemas/UpdateLabel"
        - type: object
          properties:
            path: { type: string, maxLength: 512 }
          required:
            - path

    DocumentType:
      allOf:
        - $ref: "#/components/schemas/Label"
    CreateDocumentType:
      allOf:
        - $ref: "#/components/schemas/CreateLabel"
    UpdateDocumentType:
      allOf:
        - $ref: "#/components/schemas/UpdateLabel"

    Tag:
      allOf:
        - $ref: "#/components/schemas/Label"
        - type: object
          properties:
            colour: { type: string }
            text_color: { type: string, readOnly: true }
            is_inbox_tag: { type: boolean }
    CreateTag:
      allOf:
        - $ref: "#/components/schemas/CreateLabel"
        - type: object
          properties:
            colour: { type: string }
            is_inbox_tag: { type: boolean }
    UpdateTag:
      allOf:
        - $ref: "#/components/schemas/UpdateLabel"
        - type: object
          properties:
            colour: { type: string }
            is_inbox_tag: { type: boolean }

    SetPermissions:
      description: "Set permissions on an object"
      type: object
      writeOnly: true
      properties:
        view:
          type: object
          properties:
            users:
              type: array
              items: { type: integer }
            groups:
              type: array
              items: { type: integer }
        change:
          type: object
          properties:
            users:
              type: array
              items: { type: integer }
            groups:
              type: array
              items: { type: integer }

    InheritedPermission:
      type: string
      enum:
        - contenttypes.delete_contenttype
        - auth.delete_permission
        - documents.change_workflow
        - socialaccount.delete_socialapp
        - sessions.change_session
        - documents.add_correspondent
        - django_celery_results.change_groupresult
        - documents.view_paperlesstask
        - documents.change_savedview
        - authtoken.add_tokenproxy
        - documents.add_note
        - documents.view_workflow
        - documents.add_sharelink
        - django_celery_results.delete_taskresult
        - documents.view_customfieldinstance
        - documents.change_log
        - paperless_mail.add_mailrule
        - django_celery_results.view_chordcounter
        - contenttypes.change_contenttype
        - sessions.view_session
        - contenttypes.view_contenttype
        - paperless_mail.add_processedmail
        - documents.change_document
        - documents.delete_savedview
        - django_celery_results.add_taskresult
        - django_celery_results.view_taskresult
        - documents.view_document
        - documents.change_correspondent
        - account.add_emailconfirmation
        - documents.add_customfieldinstance
        - guardian.delete_groupobjectpermission
        - guardian.change_groupobjectpermission
        - guardian.change_userobjectpermission
        - sessions.delete_session
        - auth.add_group
        - guardian.view_userobjectpermission
        - documents.delete_customfield
        - django_celery_results.add_groupresult
        - django_celery_results.delete_groupresult
        - authtoken.view_token
        - authtoken.add_token
        - documents.add_savedviewfilterrule
        - documents.delete_document
        - documents.view_correspondent
        - auth.view_user
        - paperless_mail.view_mailaccount
        - socialaccount.delete_socialaccount
        - socialaccount.add_socialaccount
        - documents.change_savedviewfilterrule
        - documents.change_documenttype
        - socialaccount.add_socialtoken
        - documents.delete_storagepath
        - documents.delete_note
        - account.delete_emailconfirmation
        - documents.view_tag
        - paperless.change_applicationconfiguration
        - documents.view_log
        - guardian.add_userobjectpermission
        - account.view_emailconfirmation
        - documents.view_savedview
        - documents.add_paperlesstask
        - documents.change_customfield
        - paperless.delete_applicationconfiguration
        - auth.delete_group
        - documents.view_savedviewfilterrule
        - documents.delete_customfieldinstance
        - paperless_mail.delete_mailrule
        - documents.change_workflowaction
        - socialaccount.change_socialapp
        - documents.add_log
        - auth.change_group
        - django_celery_results.view_groupresult
        - paperless.add_applicationconfiguration
        - socialaccount.add_socialapp
        - documents.view_storagepath
        - documents.add_documenttype
        - documents.change_customfieldinstance
        - documents.change_uisettings
        - django_celery_results.change_taskresult
        - documents.change_sharelink
        - authtoken.delete_token
        - documents.delete_workflow
        - guardian.delete_userobjectpermission
        - paperless_mail.delete_processedmail
        - documents.delete_sharelink
        - documents.add_workflow
        - socialaccount.delete_socialtoken
        - admin.add_logentry
        - paperless_mail.add_mailaccount
        - auth.add_permission
        - documents.delete_savedviewfilterrule
        - documents.add_tag
        - sessions.add_session
        - paperless_mail.change_mailrule
        - account.change_emailconfirmation
        - socialaccount.view_socialapp
        - paperless_mail.change_mailaccount
        - paperless_mail.change_processedmail
        - documents.delete_workflowtrigger
        - documents.add_customfield
        - documents.delete_paperlesstask
        - guardian.add_groupobjectpermission
        - documents.add_workflowtrigger
        - account.view_emailaddress
        - socialaccount.view_socialtoken
        - account.change_emailaddress
        - documents.add_uisettings
        - documents.view_sharelink
        - auth.change_user
        - documents.add_document
        - contenttypes.add_contenttype
        - documents.change_note
        - documents.view_workflowaction
        - documents.add_storagepath
        - socialaccount.change_socialtoken
        - documents.add_savedview
        - account.add_emailaddress
        - documents.change_workflowtrigger
        - documents.add_workflowaction
        - documents.delete_log
        - auth.view_group
        - authtoken.change_token
        - documents.delete_documenttype
        - admin.view_logentry
        - authtoken.view_tokenproxy
        - documents.delete_tag
        - auth.view_permission
        - paperless_mail.view_processedmail
        - guardian.view_groupobjectpermission
        - admin.change_logentry
        - socialaccount.change_socialaccount
        - documents.change_paperlesstask
        - auth.add_user
        - django_celery_results.delete_chordcounter
        - documents.view_note
        - paperless_mail.view_mailrule
        - authtoken.delete_tokenproxy
        - documents.change_tag
        - django_celery_results.add_chordcounter
        - paperless.view_applicationconfiguration
        - auth.delete_user
        - documents.delete_correspondent
        - admin.delete_logentry
        - django_celery_results.change_chordcounter
        - authtoken.change_tokenproxy
        - socialaccount.view_socialaccount
        - documents.delete_uisettings
        - documents.change_storagepath
        - auth.change_permission
        - paperless_mail.delete_mailaccount
        - documents.delete_workflowaction
        - documents.view_documenttype
        - documents.view_workflowtrigger
        - account.delete_emailaddress
        - documents.view_customfield
        - documents.view_uisettings

    UserPermission:
      type: string
      enum:
        - add_logentry
        - change_logentry
        - delete_logentry
        - view_logentry
        - add_group
        - change_group
        - delete_group
        - view_group
        - add_user
        - change_user
        - delete_user
        - view_user
        - add_correspondent
        - change_correspondent
        - delete_correspondent
        - view_correspondent
        - add_customfield
        - change_customfield
        - delete_customfield
        - view_customfield
        - add_document
        - change_document
        - delete_document
        - view_document
        - add_documenttype
        - change_documenttype
        - delete_documenttype
        - view_documenttype
        - add_note
        - change_note
        - delete_note
        - view_note
        - add_paperlesstask
        - change_paperlesstask
        - delete_paperlesstask
        - view_paperlesstask
        - add_savedview
        - change_savedview
        - delete_savedview
        - view_savedview
        - add_sharelink
        - change_sharelink
        - delete_sharelink
        - view_sharelink
        - add_storagepath
        - change_storagepath
        - delete_storagepath
        - view_storagepath
        - add_tag
        - change_tag
        - delete_tag
        - view_tag
        - add_uisettings
        - change_uisettings
        - delete_uisettings
        - view_uisettings
        - add_workflow
        - change_workflow
        - delete_workflow
        - view_workflow
        - add_applicationconfiguration
        - change_applicationconfiguration
        - delete_applicationconfiguration
        - view_applicationconfiguration
        - add_mailaccount
        - change_mailaccount
        - delete_mailaccount
        - view_mailaccount
        - add_mailrule
        - change_mailrule
        - delete_mailrule
        - view_mailrule

    Note:
      type: object
      properties:
        id: { type: integer, readOnly: true }
        note: { type: string }
        created: { type: string, format: date-time }
        user: { type: integer }
        document: { type: integer }
      required:
        - id
        - created
        - user
        - document

    CustomField:
      type: object
      properties:
        id: { type: integer, readOnly: true }
        name: { type: string }
        data_type: { $ref: "#/components/schemas/CustomFieldDataType" }
      required:
        - id
        - name
        - data_type

    CreateCustomField:
      type: object
      properties:
        name: { type: string }
        data_type: { $ref: "#/components/schemas/CustomFieldDataType" }

    UpdateCustomField:
      type: object
      properties:
        id: { type: integer, readOnly: true }
        name: { type: string, maxLength: 128 }
        data_type: { $ref: "#/components/schemas/CustomFieldDataType" }
      required:
        - name
        - data_type

    CustomFieldDataType:
      type: string
      enum:
        - documentlink
        - url
        - string
        - monetary
        - float
        - integer
        - boolean
        - date

    UserProfile:
      type: object
      properties:
        email: { type: string }
        password: { type: string }
        first_name: { type: string }
        last_name: { type: string }
        auth_token: { type: string }
        social_accounts: { type: array }
        has_usable_password: { type: boolean }
      required:
        - email
        - password
        - first_name
        - last_name
        - has_usable_password
        - social_accounts

    ShareLink:
      type: object
      properties:
        id: { type: integer }
        created: { type: string, format: date-time }
        expiration: { type: string, format: date-time }
        slug: { type: string }
        document: { type: integer }
        file_version:
          type: string
          enum:
            - original
            - archived
      required:
        - id
        - created
        - expiration
        - slug
        - document
        - file_version

    UpdateShareLink:
      type: object
      properties:
        id: { type: integer, readOnly: true }
        created: { type: string, format: date-time, readOnly: true }
        expiration: { type: string, format: date-time }
        slug: { type: string, readOnly: true }
        document: { type: integer }
        file_version:
          type: string
          enum:
            - archive
            - original

    SavedView:
      type: object
      properties:
        id: { type: integer, readOnly: true }
        name: { type: string }
        show_on_dashboard: { type: boolean }
        show_in_sidebar: { type: boolean }
        sort_field: { $ref: "#/components/schemas/SortField" }
        sort_reverse: { type: boolean }
        filter_rules:
          type: array
          items: { $ref: "#/components/schemas/FilterRule" }
        owner: { type: integer }
        user_can_change: { type: boolean }
      required:
        - id
        - name
        - show_on_dashboard
        - show_in_sidebar
        - filter_rules

    UpdateSavedView:
      type: object
      properties:
        id: { type: integer, readOnly: true }
        name: { type: string, maxLength: 128 }
        show_on_dashboard: { type: boolean }
        show_in_sidebar: { type: boolean }
        sort_field: { $ref: "#/components/schemas/SortField" }
        sort_reverse: { type: boolean }
        filter_rules:

      required:
        - name
        - show_on_dashboard
        - show_in_sidebar

    SortField:
      type: string
      enum:
        - archive_serial_number
        - correspondent__name
        - title
        - document_type__name
        - created
        - added
        - modified
        - num_notes
        - owner

    FilterRule:
      type: object
      properties:
        rule_type:
          type: integer
          minimum: 0
          maximum: 37
        value: {}
      required:
        - rule_type

    Task:
      type: object
      properties:
        id: { type: integer, readOnly: true }
        task_id: { type: string }
        task_file_name: { type: string }
        date_created:
          type: string
          format: date-time
        date_done:
          type: string
          format: date-time
        type:
          $ref: "#/components/schemas/TaskType"
        status:
          $ref: "#/components/schemas/TaskStatus"

    TaskStatus:
      type: string
      enum:
        - PENDING
        - STARTED
        - SUCCESS
        - FAILURE

    TaskType:
      type: string
      enum:
        - file

    MailAccount:
      type: object
      properties:
        id: { type: integer, readOnly: true }
        name: { type: string }
        imap_server: { type: string }
        imap_port: { type: integer }
        imap_security: { type: integer }
        username: { type: string }
        password: { type: string }
        character_set: { type: string }
        is_token: { type: boolean }
        owner: { type: integer }
        user_can_change: { type: boolean }
      required:
        - id
        - name
        - imap_server
        - username
        - password
        - character_set
        - is_token
        - user_can_change
    CreateMailAccount:
      type: object
      properties:
        name: { type: string }
        imap_server: { type: string }
        imap_port: { type: integer }
        imap_security: { type: integer }
        username: { type: string }
        password: { type: string }
        character_set: { type: string }
        is_token: { type: boolean }
        owner: { type: integer }
      required:
        - name
        - imap_server
        - username
        - password

    MailRule:
      type: object
      properties:
        id: { type: integer, readOnly: true }
        name: { type: string }
        account: { type: integer }
        filter_from: { type: string }
        filter_to: { type: string }
        filter_subject: { type: string }
        filter_body: { type: string }
        filter_attachment_filename_include: { type: string }
        filter_attachment_filename_exclude: { type: string }
        maximum_age: { type: integer }
        action: { type: integer }
        action_paramter: { type: string }
        assign_title_from: { type: integer }
        assign_tags:
          type: array
          items: { type: integer }
        assign_correspondent_from: { type: integer }
        assign_correspondent: { type: integer }
        assign_document_type: { type: integer }
        assign_owner_from_rule: { type: boolean }
        order: { type: integer }
        attachment_type: { type: integer }
        consumption_scope: { type: integer }
        owner: { type: integer }
        user_can_change: { type: boolean }
      required:
        - id
        - name
        - account
        - maximum_age
        - action
        - order
    DocumentOrdering:
      type: string
      enum:
        - archive_serial_number
        - -archive_serial_number
        - correspondent__name
        - -correspondent__name
        - title
        - -title
        - document_type__name
        - -document_type__name
        - created
        - -created
        - added
        - -added
        - modified
        - -modified
        - num_notes
        - -num_notes
        - owner
        - -owner

    LabelOrdering:
      type: string
      enum:
        - name
        - -name
        - matching_algorithm
        - -matching_algorithm
        - match
        - -match
        - document_count
        - -document_count
        - last_correspondence
        - -last_correspondence
    TagOrdering:
      allOf:
        - $ref: "#/components/schemas/LabelOrdering"
        - type: string
          enum:
            - color
            - -color
    UserOrdering:
      type: string
      enum:
        - username
        - -username
    GroupOrdering:
      type: string
      enum:
        - name
        - -name
